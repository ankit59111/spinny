{"version":3,"sources":["results/card/card.js","results/Results.js","App.js","serviceWorker.js","index.js"],"names":["ResultCard","props","url","image_url","title","href","className","loading","src","alt","ResultList","Fragment","data","map","item","lastPage","currentPage","onClick","handleLoadMore","App","useState","setCurrentPage","setLastPage","loader","setLoader","query","setQuery","setData","inputRef","useRef","onSubmit","e","preventDefault","current","value","fetch","then","res","json","ref","type","placeholder","page","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6QAGe,SAASA,EAAWC,GAAQ,IAChCC,EAAuBD,EAAvBC,IAAIC,EAAmBF,EAAnBE,UAAUC,EAASH,EAATG,MACrB,OACI,uBAAGC,KAAMH,EAAKI,UAAU,QACpB,yBAAKA,UAAU,eACX,yBAAKC,QAAQ,OACRC,IAAKL,EACLM,IAAKL,KAEd,yBAAKE,UAAU,cACX,8BAAOF,KCVR,SAASM,EAAWT,GAC/B,OACI,kBAAC,IAAMU,SAAP,KACI,yBAAKL,UAAW,SACXL,EAAMW,KAAKC,KAAI,SAAAC,GACZ,OAAO,kBAACd,EAAec,OAI9Bb,EAAMc,SAASd,EAAMe,YAClB,4BAAQC,QAAShB,EAAMiB,gBAAvB,aACC,MC0DFC,MApEf,SAAalB,GAAQ,IAAD,EACqBmB,mBAAS,GAD9B,mBACXJ,EADW,KACGK,EADH,OAEaD,mBAAS,GAFtB,mBAEXL,EAFW,KAEFO,EAFE,OAGSF,oBAAS,GAHlB,mBAGXG,EAHW,KAGJC,EAHI,OAIOJ,mBAAS,IAJhB,mBAIXK,EAJW,KAILC,EAJK,OAKKN,mBAAS,IALd,mBAKXR,EALW,KAKNe,EALM,KAMZC,EAAWC,iBAAO,MAuCxB,OACE,yBAAKvB,UAAU,OACf,0BAAMA,UAAU,cAAcwB,SAtChC,SAAoBC,GAClBA,EAAEC,iBACF,IAAIP,EAASG,EAASK,QAAQC,MAC9BR,EAASD,GACTD,GAAU,GACVH,EAAe,GACfC,EAAY,GACTG,EACDU,MAAM,2CAAD,OAA4CV,EAA5C,qBACAW,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAC,GACJb,GAAU,GACNa,EAAG,YACLf,EAAYe,EAAG,WACfV,EAAQU,EAAG,aAInBb,GAAU,KAmBV,yBAAKlB,UAAU,eACb,2BAAOiC,IAAMX,EAAUY,KAAK,OAAOC,YAAY,qBAC/C,uCAEF,yBAAKnC,UAAW,mBAAhB,gBACe,8BACZiB,EAAS,eAENE,EAAK,kDAA8CG,EAASK,QAAQC,MAA/D,oBAED,cAKX,kBAACxB,EAAD,CAAYE,KAAMA,EAAMI,YAAaA,EAAaD,SAAUA,EAAUG,eA9BzE,SAAwBa,GACtB,IAAIW,EAAO1B,EAAc,EACzBmB,MAAM,2CAAD,OAA4CV,EAA5C,0BAAmEiB,IACnEN,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,GACAA,EAAG,YACLf,EAAYe,EAAG,WACfV,GAAQ,SAAAf,GAAI,4BAAMA,GAAN,YAAcyB,EAAG,aAC7BhB,EAAeqB,YCjCPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f29993de.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.css';\n\nexport default function ResultCard(props) {\n    const {url,image_url,title} = props\n    return (\n        <a href={url} className=\"card\">\n            <div className=\"card__image\">\n                <img loading=\"lazy\"\n                     src={image_url}\n                     alt={title}/>\n            </div>\n            <div className=\"card__name\">\n                <span>{title}</span>\n            </div>\n        </a>\n    )\n}","import React from \"react\";\nimport ResultCard from \"./card/card\";\n\nexport default function ResultList(props) {\n    return(\n        <React.Fragment>\n            <div className={'cards'}>\n                {props.data.map(item=>{\n                    return <ResultCard {...item}/>\n                })}\n\n            </div>\n            {props.lastPage>props.currentPage?\n                <button onClick={props.handleLoadMore}>Load More</button>\n                :null}\n        </React.Fragment>\n    )\n}","import React, { useRef, useState} from 'react';\nimport './App.css';\nimport ResultList from \"./results/Results\";\n\nfunction App(props) {\n  const [currentPage , setCurrentPage] = useState(1);\n  const [lastPage,setLastPage] = useState(1);\n  const [loader,setLoader] = useState(false);\n  const [query,setQuery] = useState('');\n  const [data,setData] = useState([]);\n  const inputRef = useRef(null);\n\n\n  function handleForm(e) {\n    e.preventDefault();\n    let query  = inputRef.current.value;\n    setQuery(query);\n    setLoader(true);\n    setCurrentPage(1);\n    setLastPage(1);\n    if(query) {\n      fetch(`https://api.jikan.moe/v3/search/anime?q=${query}&limit=16&page=1`)\n          .then(res => {\n            return res.json();\n          })\n          .then(res => {\n            setLoader(false);\n            if (res['last_page']) {\n              setLastPage(res['last_page']);\n              setData(res['results']);\n            }\n          });\n    }else{\n      setLoader(false)\n    }\n  }\n\n  function handleLoadMore(e) {\n    let page = currentPage + 1;\n    fetch(`https://api.jikan.moe/v3/search/anime?q=${query}&limit=16&page=${page}`)\n        .then(res=>res.json())\n        .then(res=>{\n          if (res['last_page']) {\n            setLastPage(res['last_page']);\n            setData(data=>[...data,...res['results']] );\n            setCurrentPage(page)\n          }\n        })\n  }\n  return (\n    <div className=\"App\">\n    <form className='search-form' onSubmit={handleForm}>\n      <div className='form-fields'>\n        <input ref= {inputRef} type='text' placeholder='Search here ....'/>\n        <button>Go</button>\n      </div>\n      <div className={'request_details'}>\n        Requesting : <span>\n        {loader ? 'loading.....'\n            :\n            query ? `https://api.jikan.moe/v3/search/anime?q=${inputRef.current.value}&limit=16&page=1`\n                :\n                'no query'\n        }</span>\n      </div>\n    </form>\n\n     <ResultList data={data} currentPage={currentPage} lastPage={lastPage} handleLoadMore={handleLoadMore}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}